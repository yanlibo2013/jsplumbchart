{"remainingRequest":"C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\package\\jsplumbchart\\src\\view\\chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\package\\jsplumbchart\\src\\view\\chart.vue","mtime":1566719450364},{"path":"C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport jsplumbchart from \"../jsplumbchart/index\";\r\nimport { mapGetters, mapActions, mapState } from \"vuex\";\r\n\r\nimport { flowData } from \"../../mock/data/flowData.js\";\r\nexport default {\r\n  watch: {\r\n    // flowData(val) {\r\n    // }\r\n  },\r\n  props: {\r\n    // data: {\r\n    //   type: Object,\r\n    //   default: false\r\n    // }\r\n  },\r\n  components: {},\r\n  data: function() {\r\n    return {\r\n      stepData: [],\r\n      links: [],\r\n      flowData: []\r\n    };\r\n  },\r\n  computed: {\r\n    //...mapState([\"\"])\r\n  },\r\n  mounted() {\r\n    let res = flowData;\r\n\r\n    this.flowData = res.steps;\r\n    this.flowType = res.flowType;\r\n    this.links = res.links;\r\n  },\r\n  beforeCreate() {},\r\n  created() {},\r\n  beforeMount() {},\r\n  beforeUpdate() {},\r\n  updated() {},\r\n  beforeDestroy() {},\r\n  destroyed: function() {},\r\n  methods: {\r\n    //...mapActions([\"\"]),\r\n    modifyChart(val) {\r\n      this.flowData = val.stepData;\r\n      this.links = val.links;\r\n    },\r\n    nodedblClick(val) {},\r\n    handleDrop(val) {\r\n      this.flowData.push(this.getCurrentNode(val.data));\r\n    },\r\n    getCurrentNode(data) {\r\n      return {\r\n        id: data.drawIcon.id + \"_\" + (this.flowData.length + +1),\r\n        name: data.drawIcon.name,\r\n        type: data.drawIcon.type,\r\n        x: event.offsetX,\r\n        y: event.offsetY,\r\n        stepSettings: data.drawIcon.stepSettings\r\n      };\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["chart.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"chart.vue","sourceRoot":"src/view","sourcesContent":["<template>\r\n  <jsplumbchart\r\n    :data=\"{stepData:flowData,links:this.links}\"\r\n    @modifyChart=\"modifyChart\"\r\n    @nodedblClick=\"nodedblClick\"\r\n    @handleDrop=\"handleDrop\"\r\n    ref=\"jsplumbchart\"\r\n  ></jsplumbchart>\r\n</template>\r\n\r\n\r\n<script>\r\nimport jsplumbchart from \"../jsplumbchart/index\";\r\nimport { mapGetters, mapActions, mapState } from \"vuex\";\r\n\r\nimport { flowData } from \"../../mock/data/flowData.js\";\r\nexport default {\r\n  watch: {\r\n    // flowData(val) {\r\n    // }\r\n  },\r\n  props: {\r\n    // data: {\r\n    //   type: Object,\r\n    //   default: false\r\n    // }\r\n  },\r\n  components: {},\r\n  data: function() {\r\n    return {\r\n      stepData: [],\r\n      links: [],\r\n      flowData: []\r\n    };\r\n  },\r\n  computed: {\r\n    //...mapState([\"\"])\r\n  },\r\n  mounted() {\r\n    let res = flowData;\r\n\r\n    this.flowData = res.steps;\r\n    this.flowType = res.flowType;\r\n    this.links = res.links;\r\n  },\r\n  beforeCreate() {},\r\n  created() {},\r\n  beforeMount() {},\r\n  beforeUpdate() {},\r\n  updated() {},\r\n  beforeDestroy() {},\r\n  destroyed: function() {},\r\n  methods: {\r\n    //...mapActions([\"\"]),\r\n    modifyChart(val) {\r\n      this.flowData = val.stepData;\r\n      this.links = val.links;\r\n    },\r\n    nodedblClick(val) {},\r\n    handleDrop(val) {\r\n      this.flowData.push(this.getCurrentNode(val.data));\r\n    },\r\n    getCurrentNode(data) {\r\n      return {\r\n        id: data.drawIcon.id + \"_\" + (this.flowData.length + +1),\r\n        name: data.drawIcon.name,\r\n        type: data.drawIcon.type,\r\n        x: event.offsetX,\r\n        y: event.offsetY,\r\n        stepSettings: data.drawIcon.stepSettings\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n</style>\r\n"]}]}